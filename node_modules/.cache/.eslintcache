[{"C:\\Users\\COSKUN\\Documents\\GitHub\\weather-app\\src\\index.js":"1","C:\\Users\\COSKUN\\Documents\\GitHub\\weather-app\\src\\App.js":"2"},{"size":212,"mtime":1698003962565,"results":"3","hashOfConfig":"4"},{"size":2181,"mtime":1698004307131,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","suppressedMessages":"8","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1gyrxnd",{"filePath":"9","messages":"10","suppressedMessages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"C:\\Users\\COSKUN\\Documents\\GitHub\\weather-app\\src\\index.js",[],[],"C:\\Users\\COSKUN\\Documents\\GitHub\\weather-app\\src\\App.js",["13"],[],"\nimport axios from \"axios\";\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [weather, setWeather] = useState(null);\n  const [tempType, setTempType] = useState(\"C\");\n  const MINUTE_MS = 10000;\n  const apiAddress = \"https://api.weatherapi.com/v1/forecast.json?key=66656cd159d3477886c134122232210&q=Istanbul&days=1&q=Istanbul\"\n  useEffect(() => {\n    async function getWeather(){\n      try {\n        const response = await axios.get(apiAddress);\n        setWeather(response?.data);\n\n      } catch(error){\n        console.log(error);\n      }\n    }\n    getWeather();\n    const interval = setInterval(() => {\n      getWeather();\n    }, MINUTE_MS);\n  \n    return () => clearInterval(interval); \n    \n  }, [])\n\n  const renderWeatherHour =  (hourWeatherList) => {\n    let html = <></>;\n    html = hourWeatherList?.map((item) => {\n      let time = new Date(item?.time);\n      time = time.getHours()\n      var ampm = time >= 12 ? ' pm' : ' am';\n      time = time % 12;\n      time = time ? time : 12; // the hour '0' should be '12'\n      let timeText = time + ampm;\n      return(\n        <div className=\"weather-temp\">\n          <p>{timeText}</p>\n          <img src={item?.condition?.icon}/> \n          <p>{tempType === \"C\" ? item?.temp_c : item?.temp_f}°</p>\n        </div>\n      )\n    })\n    return html;\n  }\n  return (\n    <div className=\"App\">\n      <h1>Weather App Project</h1>\n      <div className=\"container\">\n        <div className=\"weather-container\">\n          <div className=\"weather-title-container\">\n            <div>\n              <p className=\"location-name\">{weather?.location?.name}</p>\n              <p>{weather?.location?.name}, {weather?.location?.country} </p>\n            </div>\n            <div>\n              <span className=\"weather-type\" onClick={() => setTempType(\"C\")}>°C</span>\n              <span className=\"weather-type\" onClick={() => setTempType(\"F\")}>°F</span>\n            </div>\n          </div>\n          <div className=\"weather-item-container\">\n\n            {renderWeatherHour(weather?.forecast?.forecastday[0]?.hour)}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"14","severity":1,"message":"15","line":42,"column":11,"nodeType":"16","endLine":42,"endColumn":45},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]